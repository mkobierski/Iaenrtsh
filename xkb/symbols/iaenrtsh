partial alphanumeric_keys
xkb_symbols "iaenrtsh" {
    include "us(basic)"

    name[Group1]= "English (Iaenrtsh)";

    key.type[Group1]="FOUR_LEVEL";
    key <AD01>{ type[Group1]="THREE_LEVEL", [w, W, at, at] };

    key.type[Group1]="EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AD02>{ [d, D, numbersign, numbersign, minus, minus, minus, minus] };

    // To use NumLock (Mod2) instead of Hyper (Mod3) for Level5+.
    // Controls EIGHT_LEVEL_LEVEL_FIVE_LOCK.
    // Note it's not on the 'i' or 's'  because we want to use these numbers in
    // combination with Control (on Caps Lock key) and some keyboards won't
    // register both Caps Lock, Qwerty 'a', and left alt simultaneously.
    //
    // There's a quirk where in some input fields an 'o' will be sent instead.
    // Redirecting to NMLK was an attempt to fix that but it doesn't work as
    // intended.  Specifically the key does not repeat with SetMods (good), but
    // with redirect it does (bad).
    //
    // replace key <NMLK> {
    //     vmods = NumLock,
    //     type[Group1] = "ONE_LEVEL",
    //     symbols[Group1] = [ NoSymbol ],
    //     actions[Group1] = [ SetMods(modifiers=NumLock) ]
    // };
    key <AD03>{
        vmods = NumLock,
        type[Group1] = "THREE_LEVEL",
        symbols[Group1] = [ g, G, NoSymbol ],
        actions[Group1] = [ NoAction(), NoAction(), SetMods(modifiers=NumLock)]
    };

    key <AD04>{ [f, F, dollar, dollar, period, period, period, period ] };

    key.type[Group1]="FOUR_LEVEL";
    key <AD05>{ [z, Z, percent, percent] };

    key.type[Group1]="EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AD06>{ [q, Q, asciicircum, asciicircum, minus, minus, minus, minus] };
    key <AD07>{ [b, B, ampersand, ampersand, 7, 7, 7, 7] } ;
    key <AD08>{ [u, U, equal, dead_diaeresis, 8, 8, 8, 8] };
    key <AD09>{ [o, O, exclam, question, 9, 9, 9, 9] };
    key <AD10>{ [y, Y, plus, plus, plus, plus, plus, plus] };
    key <AD11>{ [minus, underscore, grave, asciitilde] };

    key.type[Group1]="FOUR_LEVEL";
    key <AC01>{ type[Group1]="THREE_LEVEL", [r, R, Escape] };

    replace key <AC02>{ [t, T, underscore, minus ] };
    key <AC03>{
        type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
        [s, S, NoAction, NoAction, NoAction, NoAction, NoAction, NoAction],
        actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<RTRN>, clearmods=Mod5), Redirect(key=<RTRN>, clearmods=Mod5), Redirect(key=<RTRN>, clearmods=Mod5), Redirect(key=<RTRN>, clearmods=Mod5), Redirect(key=<RTRN>, clearmods=Mod5), Redirect(key=<RTRN>, clearmods=Mod5) ]
    };
    key <AC04>{ [h, H, BackSpace, BackSpace] };
    key <AC05>{ [m, M, Tab, ISO_Left_Tab] };

    key.type[Group1]="EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AC06>{ [period, space, space, space, period, period, period, period ] };
    key <AC07>{ [n, N, BackSpace, BackSpace, 4, 4, 4, 4 ] };
    key <AC08>{ [e, E, parenleft, dead_acute, 5, 5, 5, 5 ] };
    key <AC09>{ [a, A, parenright, dead_grave, 6, 6, 6, 6 ] };
    key <AC10>{ [i, I, semicolon, colon, 0, 0, 0, 0] };
    key <AC11>{ [j, J, quotedbl, apostrophe, equal, equal, equal, equal] };

    key <AB01>{ [x, X] };
    key <AB02>{ [k, K, braceleft, braceleft] };
    key <AB03>{ [c, C, braceright, braceright] };
    key <AB04>{ [l, L, Delete] };
    key <AB05>{ [v, V, space] };

    key.type[Group1]="EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AB06>{ [comma, asterisk, asterisk, asterisk, asterisk, asterisk, asterisk, asterisk] };
    key <AB07>{ [p, P, bracketleft, bracketleft, 1, 1, 1, 1] };
    key <AB08>{ [apostrophe, quotedbl, less, dead_circumflex, 2, 2, 2, 2] };
    key <AB09>{ [colon, semicolon, greater, dead_cedilla, 3, 3, 3, 3] };

    key.type[Group1]="FOUR_LEVEL";
    key <AB10>{ [slash, question, bracketright, bracketright] };

    include "iaenrtsh(spc_alt)"
    include "level3(lalt_switch)"
    include "level5(lock)"
    include "ctrl(swapcaps_hyper)"
};

partial alphanumeric_keys
xkb_symbols "iaenrtsh-l" {
    include "iaenrtsh"

    // Swap h and l

    key.type[Group1]="EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AB04>{ [h, H, BackSpace, BackSpace, BackSpace, BackSpace, BackSpace, BackSpace] };
    key <AC04>{ [l, L, Delete, Delete, Delete, Delete, Delete, Delete] };
};

partial alphanumeric_keys
xkb_symbols "iaenrtsh-l-bkspc" {
    include "iaenrtsh(iaenrtsh-l)"
    include "iaenrtsh(spc_alt_nominus)"

    key <AC01>{ type[Group1]="THREE_LEVEL", [r, R, minus] };

    key <AD07>{ [period, comma, period, comma, 7, 7, 7, 7] } ;
    key <AC06>{ [b, B, ampersand, ampersand, BackSpace, BackSpace, BackSpace, BackSpace] };
    key <AC07>{ [n, N, asterisk, asterisk, 4, 4, 4, 4 ] };
    key <AB01>{ type[Group1]="THREE_LEVEL", [x, X, Escape] };
    key <AB06>{ [BackSpace,BackSpace, BackSpace, BackSpace,  asterisk, asterisk, asterisk, asterisk] };
};

partial alphanumeric_keys
xkb_symbols "iaenrtsh-l-bkspc-w" {
    include "iaenrtsh(iaenrtsh-l-bkspc)"
    key <AB01>{ type[Group1]="THREE_LEVEL", [w, W, Escape] };
    key <AD01>{ type[Group1]="THREE_LEVEL", [x, X, at, at] };
};

partial alphanumeric_keys
xkb_symbols "spc_alt" {
    replace key <SPCE> { [ Alt_R, Meta_R ] };
    replace key <RALT> {
        type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
        [ space, underscore, minus, minus, space, space, space, space ]
    };
    modifier_map Mod1 { <SPCE> };
};

partial modifier_keys
xkb_symbols "spc_alt_nominus" {
    replace key <SPCE> { [ Alt_R, Meta_R ] };
    replace key <RALT> {
        type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
        [ space, space, space, space, space, space, space, space ]
    };
    modifier_map Mod1 { <SPCE> };
};
